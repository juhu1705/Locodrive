plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}



repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    def git_repos = ["eventmanager", "logger", "configmanager"]
    git_repos.forEach(string ->
            maven {
                url = uri("https://maven.pkg.github.com/juhu1705/" + string)
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            })
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    implementation 'de.noisruker:event-manager:1.1.0'
    implementation 'de.noisruker:logger:1.0.3'
}

def rustBasePath = ".."

tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
            workingDir rustBasePath
            standardOutput = os
        }
        def outputAsString = os.toString()
        def json = new groovy.json.JsonSlurper().parseText(outputAsString)

        logger.info("cargo target directory: ${json.target_directory}")
        project.ext.cargo_target_directory = json.target_directory
    }
}

tasks.create(name: 'cargo-build', type: Exec, description: "Run Cargo build", dependsOn: "cargo-output-dir") {
    workingDir rustBasePath
    logger.info("Run cargo build")
    commandLine 'cargo', 'build', '--release'
}

def flapigen_code = tasks.create(name: 'optimize-flapigen-code', description: "Adds implements parameters") {
    logger.info("Optimize flapigen code")
    def locoNetMessages = ["Idle", "GpOn", "GpOff", "Busy", "LocoAdr", "SwAck", "SwState", "RqSlData", "MoveSlots", "LinkSlots", "UnlinkSlots", "ConsistFunc", "SlotStat1", "LongAck", "InputRep", "SwRep", "SwReq", "LocoSnd", "LocoDirf", "LocoSpd", "MultiSense", "UhliFun", "WrSlData", "SlRdData", "ImmPacket", "Rep", "PeerXfer"]

    def basePath = new File(project.ext.cargo_target_directory).getParentFile()

    locoNetMessages.forEach(className -> {
        if(new File(basePath.getAbsolutePath() + "\\lib\\src\\main\\java\\de\\noisruker\\locodrive\\args\\" + className + ".java").exists())
            ant.replace(file: basePath.getAbsolutePath() + "\\lib\\src\\main\\java\\de\\noisruker\\locodrive\\args\\" + className + ".java", token: "public final class " + className + " {", value: "public final class " + className + " implements de.noisruker.locodrive.control.ILocoNetMessage {")
    })
}

def deploy = tasks.create(name: "rust-deploy", type: Sync, dependsOn: "cargo-build") {
    from "${project.ext.cargo_target_directory}/release"
    include "*.dylib","*.so","*.dll"
    into "rust-lib/"
}

deploy.configure {mustRunAfter("cargo-build")}
flapigen_code.configure {mustRunAfter("cargo-build")}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn "rust-deploy", "optimize-flapigen-code"
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'rust-lib'
        }
    }
}
