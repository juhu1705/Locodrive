plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group 'de.noisruker'
version '0.0.0'

java {
    withJavadocJar()
    withSourcesJar()
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'locodrive'
            from components.java
            pom {
                name = 'Locodrive'
                description = 'A basic java library for managing the connection to a loco net'
                url = 'https://github.com/juhu1705/locodrive'
                licenses {
                    license {
                        name = 'GNU General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'juhu1705'
                        name = 'Fabius Mettner'
                        email = 'fabius1705@live.de'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/juhu1705/locodrive.git'
                    developerConnection = 'scm:git:ssh://github.com/juhu1705/locodrive.git'
                    url = 'http://github.com/juhu1705/locodrive'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/juhu1705/locodrive")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    def git_repos = ["eventmanager", "logger", "configmanager"]
    git_repos.forEach(string ->
            maven {
                url = uri("https://maven.pkg.github.com/juhu1705/" + string)
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            })
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    implementation 'de.noisruker:event-manager:1.1.0'
    implementation 'de.noisruker:logger:1.0.3'
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

def rustBasePath = ".."

tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
            workingDir rustBasePath
            standardOutput = os
        }
        def outputAsString = os.toString()
        def json = new groovy.json.JsonSlurper().parseText(outputAsString)

        logger.info("cargo target directory: ${json.target_directory}")
        project.ext.cargo_target_directory = json.target_directory
    }
}

tasks.create(name: 'cargo-build', type: Exec, description: "Run Cargo build", dependsOn: "cargo-output-dir") {
    workingDir rustBasePath
    logger.info("Run cargo build")
    if(!new File(new File(project.ext.cargo_target_directory).getParentFile().getAbsolutePath() + "/setup_scripts/run.txt").exists()) {
        commandLine 'cargo', 'build', '--release'
    } else {
        commandLine 'echo', 'already build'
    }
    doLast {
        logger.info("Optimize flapigen code")
        def locoNetMessages = ["Idle", "GpOn", "GpOff", "Busy", "LocoAdr", "SwAck", "SwState", "RqSlData", "MoveSlots", "LinkSlots", "UnlinkSlots", "ConsistFunc", "SlotStat1", "LongAck", "InputRep", "SwRep", "SwReq", "LocoSnd", "LocoDirf", "LocoSpd", "MultiSense", "UhliFun", "WrSlData", "SlRdData", "ImmPacket", "Rep", "PeerXfer"]

        def basePath = new File(project.ext.cargo_target_directory).getParentFile()

        locoNetMessages.forEach(className -> {
            logger.info(basePath.getAbsolutePath() + "/lib/src/main/java/de/noisruker/locodrive/args/" + className + ".java: " + (new File(basePath.getAbsolutePath() + "/lib/src/main/java/de/noisruker/locodrive/args/" + className + ".java").exists()))
            if(new File(basePath.getAbsolutePath() + "/lib/src/main/java/de/noisruker/locodrive/args/" + className + ".java").exists())
                ant.replace(file: basePath.getAbsolutePath() + "/lib/src/main/java/de/noisruker/locodrive/args/" + className + ".java", token: "public final class " + className + " {", value: "public final class " + className + " implements de.noisruker.locodrive.control.ILocoNetMessage {")
        })
    }
}

def deploy = tasks.create(name: "rust-deploy", type: Sync, dependsOn: "cargo-build") {
    from "${project.ext.cargo_target_directory}"
    include "release/*.dylib","release/*.so","release/*.dll", "*/release/*.dylib","*/release/*.so","*/release/*.dll"
    includeEmptyDirs false
    eachFile {
        def path = it.getPath()
        path = path.replaceAll(/.*release((\/|\\).*locodrive.*)$/) { it[1] }
        it.setPath(path)
    }
    into "rust-lib/"
}

deploy.configure {mustRunAfter("cargo-build")}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn "rust-deploy"
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'rust-lib'
        }
    }
}
